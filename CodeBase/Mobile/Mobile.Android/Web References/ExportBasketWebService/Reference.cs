//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Mobile.Droid.ExportBasketWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ExportBasket_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/ExportBasket")]
    public partial class ExportBasket : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ExportBasketsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertBasketOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ExportBasket() {
            this.Url = "http://localhost:7047/BC140/WS/CRONUS%20International%20Ltd./Codeunit/ExportBaske" +
                "t";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ExportBasketsCompletedEventHandler ExportBasketsCompleted;
        
        /// <remarks/>
        public event InsertBasketCompletedEventHandler InsertBasketCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ExportBasket:ExportBaskets", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportBasket", ResponseElementName="ExportBaskets_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportBasket", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExportBaskets(NavBasket baskets) {
            this.Invoke("ExportBaskets", new object[] {
                        baskets});
        }
        
        /// <remarks/>
        public void ExportBasketsAsync(NavBasket baskets) {
            this.ExportBasketsAsync(baskets, null);
        }
        
        /// <remarks/>
        public void ExportBasketsAsync(NavBasket baskets, object userState) {
            if ((this.ExportBasketsOperationCompleted == null)) {
                this.ExportBasketsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportBasketsOperationCompleted);
            }
            this.InvokeAsync("ExportBaskets", new object[] {
                        baskets}, this.ExportBasketsOperationCompleted, userState);
        }
        
        private void OnExportBasketsOperationCompleted(object arg) {
            if ((this.ExportBasketsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportBasketsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ExportBasket:InsertBasket", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportBasket", ResponseElementName="InsertBasket_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportBasket", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertBasket(ref int iD, ref bool paid, ref int product) {
            object[] results = this.Invoke("InsertBasket", new object[] {
                        iD,
                        paid,
                        product});
            iD = ((int)(results[0]));
            paid = ((bool)(results[1]));
            product = ((int)(results[2]));
        }
        
        /// <remarks/>
        public void InsertBasketAsync(int iD, bool paid, int product) {
            this.InsertBasketAsync(iD, paid, product, null);
        }
        
        /// <remarks/>
        public void InsertBasketAsync(int iD, bool paid, int product, object userState) {
            if ((this.InsertBasketOperationCompleted == null)) {
                this.InsertBasketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertBasketOperationCompleted);
            }
            this.InvokeAsync("InsertBasket", new object[] {
                        iD,
                        paid,
                        product}, this.InsertBasketOperationCompleted, userState);
        }
        
        private void OnInsertBasketOperationCompleted(object arg) {
            if ((this.InsertBasketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertBasketCompleted(this, new InsertBasketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:microsoft-dynamics-nav/xmlports/BasketXml")]
    public partial class NavBasket {
        
        private NavItem[] navItemField;
        
        private string[] textField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NavItem")]
        public NavItem[] NavItem {
            get {
                return this.navItemField;
            }
            set {
                this.navItemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:microsoft-dynamics-nav/xmlports/BasketXml")]
    public partial class NavItem {
        
        private int idField;
        
        private string isPaidField;
        
        private int productsIDField;
        
        public NavItem() {
            this.idField = 0;
            this.productsIDField = 0;
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string IsPaid {
            get {
                return this.isPaidField;
            }
            set {
                this.isPaidField = value;
            }
        }
        
        /// <remarks/>
        public int ProductsID {
            get {
                return this.productsIDField;
            }
            set {
                this.productsIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ExportBasketsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void InsertBasketCompletedEventHandler(object sender, InsertBasketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertBasketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertBasketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int iD {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool paid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int product {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591