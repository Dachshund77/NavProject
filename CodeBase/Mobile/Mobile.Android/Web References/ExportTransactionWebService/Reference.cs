//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Mobile.Droid.ExportTransactionWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ExportTransaction_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/ExportTransaction")]
    public partial class ExportTransaction : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ExportTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertTransactionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ExportTransaction() {
            this.Url = "http://localhost:7047/BC140/WS/CRONUS%20International%20Ltd./Codeunit/ExportTrans" +
                "action";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ExportTransactionsCompletedEventHandler ExportTransactionsCompleted;
        
        /// <remarks/>
        public event InsertTransactionCompletedEventHandler InsertTransactionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ExportTransaction:ExportTransactions", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportTransaction", ResponseElementName="ExportTransactions_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportTransaction", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExportTransactions(NavItems items) {
            this.Invoke("ExportTransactions", new object[] {
                        items});
        }
        
        /// <remarks/>
        public void ExportTransactionsAsync(NavItems items) {
            this.ExportTransactionsAsync(items, null);
        }
        
        /// <remarks/>
        public void ExportTransactionsAsync(NavItems items, object userState) {
            if ((this.ExportTransactionsOperationCompleted == null)) {
                this.ExportTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportTransactionsOperationCompleted);
            }
            this.InvokeAsync("ExportTransactions", new object[] {
                        items}, this.ExportTransactionsOperationCompleted, userState);
        }
        
        private void OnExportTransactionsOperationCompleted(object arg) {
            if ((this.ExportTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportTransactionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ExportTransaction:InsertTransaction", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportTransaction", ResponseElementName="InsertTransaction_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportTransaction", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertTransaction([System.Xml.Serialization.XmlElementAttribute(DataType="date")] ref System.DateTime timeParam, ref int amountParam, ref int basketIDParam, ref string paymentTypeParam) {
            object[] results = this.Invoke("InsertTransaction", new object[] {
                        timeParam,
                        amountParam,
                        basketIDParam,
                        paymentTypeParam});
            timeParam = ((System.DateTime)(results[0]));
            amountParam = ((int)(results[1]));
            basketIDParam = ((int)(results[2]));
            paymentTypeParam = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void InsertTransactionAsync(System.DateTime timeParam, int amountParam, int basketIDParam, string paymentTypeParam) {
            this.InsertTransactionAsync(timeParam, amountParam, basketIDParam, paymentTypeParam, null);
        }
        
        /// <remarks/>
        public void InsertTransactionAsync(System.DateTime timeParam, int amountParam, int basketIDParam, string paymentTypeParam, object userState) {
            if ((this.InsertTransactionOperationCompleted == null)) {
                this.InsertTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertTransactionOperationCompleted);
            }
            this.InvokeAsync("InsertTransaction", new object[] {
                        timeParam,
                        amountParam,
                        basketIDParam,
                        paymentTypeParam}, this.InsertTransactionOperationCompleted, userState);
        }
        
        private void OnInsertTransactionOperationCompleted(object arg) {
            if ((this.InsertTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertTransactionCompleted(this, new InsertTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:microsoft-dynamics-nav/xmlports/TransactionXml")]
    public partial class NavItems {
        
        private NavItem[] navItemField;
        
        private string[] textField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NavItem")]
        public NavItem[] NavItem {
            get {
                return this.navItemField;
            }
            set {
                this.navItemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:microsoft-dynamics-nav/xmlports/TransactionXml")]
    public partial class NavItem {
        
        private int idField;
        
        private string timeField;
        
        private int amountField;
        
        private int basketIDField;
        
        private string paymentTypeField;
        
        public NavItem() {
            this.idField = 0;
            this.amountField = 0;
            this.basketIDField = 0;
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public int Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        /// <remarks/>
        public int BasketID {
            get {
                return this.basketIDField;
            }
            set {
                this.basketIDField = value;
            }
        }
        
        /// <remarks/>
        public string PaymentType {
            get {
                return this.paymentTypeField;
            }
            set {
                this.paymentTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ExportTransactionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void InsertTransactionCompletedEventHandler(object sender, InsertTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime timeParam {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int amountParam {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int basketIDParam {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string paymentTypeParam {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
}

#pragma warning restore 1591