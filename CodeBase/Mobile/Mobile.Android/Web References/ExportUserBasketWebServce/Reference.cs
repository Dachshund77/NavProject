//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Mobile.Droid.ExportUserBasketWebServce {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ExportUserBasket_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/ExportUserBasket")]
    public partial class ExportUserBasket : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CallExportUserBasketOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertUserBasketOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ExportUserBasket() {
            this.Url = "http://localhost:7047/BC140/WS/CRONUS%20International%20Ltd./Codeunit/ExportUserB" +
                "asket";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CallExportUserBasketCompletedEventHandler CallExportUserBasketCompleted;
        
        /// <remarks/>
        public event InsertUserBasketCompletedEventHandler InsertUserBasketCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ExportUserBasket:ExportUserBasket", RequestElementName="ExportUserBasket", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportUserBasket", ResponseElementName="ExportUserBasket_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportUserBasket", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CallExportUserBasket(ref NavUserBaskets items) {
            object[] results = this.Invoke("CallExportUserBasket", new object[] {
                        items});
            items = ((NavUserBaskets)(results[0]));
        }
        
        /// <remarks/>
        public void CallExportUserBasketAsync(NavUserBaskets items) {
            this.CallExportUserBasketAsync(items, null);
        }
        
        /// <remarks/>
        public void CallExportUserBasketAsync(NavUserBaskets items, object userState) {
            if ((this.CallExportUserBasketOperationCompleted == null)) {
                this.CallExportUserBasketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallExportUserBasketOperationCompleted);
            }
            this.InvokeAsync("CallExportUserBasket", new object[] {
                        items}, this.CallExportUserBasketOperationCompleted, userState);
        }
        
        private void OnCallExportUserBasketOperationCompleted(object arg) {
            if ((this.CallExportUserBasketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallExportUserBasketCompleted(this, new CallExportUserBasketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/ExportUserBasket:InsertUserBasket", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportUserBasket", ResponseElementName="InsertUserBasket_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/ExportUserBasket", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertUserBasket(ref int userIDParam, ref int basketIDParam) {
            object[] results = this.Invoke("InsertUserBasket", new object[] {
                        userIDParam,
                        basketIDParam});
            userIDParam = ((int)(results[0]));
            basketIDParam = ((int)(results[1]));
        }
        
        /// <remarks/>
        public void InsertUserBasketAsync(int userIDParam, int basketIDParam) {
            this.InsertUserBasketAsync(userIDParam, basketIDParam, null);
        }
        
        /// <remarks/>
        public void InsertUserBasketAsync(int userIDParam, int basketIDParam, object userState) {
            if ((this.InsertUserBasketOperationCompleted == null)) {
                this.InsertUserBasketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertUserBasketOperationCompleted);
            }
            this.InvokeAsync("InsertUserBasket", new object[] {
                        userIDParam,
                        basketIDParam}, this.InsertUserBasketOperationCompleted, userState);
        }
        
        private void OnInsertUserBasketOperationCompleted(object arg) {
            if ((this.InsertUserBasketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertUserBasketCompleted(this, new InsertUserBasketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:microsoft-dynamics-nav/xmlports/UserBasketXml")]
    public partial class NavUserBaskets {
        
        private NavUserBasket[] navUserBasketField;
        
        private string[] textField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NavUserBasket")]
        public NavUserBasket[] NavUserBasket {
            get {
                return this.navUserBasketField;
            }
            set {
                this.navUserBasketField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:microsoft-dynamics-nav/xmlports/UserBasketXml")]
    public partial class NavUserBasket {
        
        private int userIDField;
        
        private int basketIDField;
        
        public NavUserBasket() {
            this.userIDField = 0;
            this.basketIDField = 0;
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public int BasketID {
            get {
                return this.basketIDField;
            }
            set {
                this.basketIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CallExportUserBasketCompletedEventHandler(object sender, CallExportUserBasketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallExportUserBasketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallExportUserBasketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NavUserBaskets items {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NavUserBaskets)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void InsertUserBasketCompletedEventHandler(object sender, InsertUserBasketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertUserBasketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertUserBasketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int userIDParam {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int basketIDParam {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591